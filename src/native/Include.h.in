#pragma once

//
// File configured by CMake do not edit Include.h (you can edit Include.h.in)
//

#include <cstddef>
#include <cstdint>

// clang-format off
#define THRIVE_LIBRARY_VERSION @NATIVE_LIBRARY_VERSION@
// clang-format on

#ifdef THRIVE_NATIVE_BUILD
#ifdef WIN32
#define THRIVE_NATIVE_API __declspec(dllexport)
#else
#define THRIVE_NATIVE_API __attribute__((visibility("default")))
#endif // WIN32
#else
#ifdef WIN32
#define THRIVE_NATIVE_API __declspec(dllimport)
#else
#define THRIVE_NATIVE_API __attribute__((visibility("default")))
#endif // WIN32
#endif // THRIVE_NATIVE_BUILD

#cmakedefine USE_OBJECT_POOLS

#cmakedefine NULL_HAS_UNUSUAL_REPRESENTATION

#cmakedefine USE_SMALL_VECTOR_POOLS

#ifdef WIN32
#define FORCE_INLINE __forceinline
#else
#define FORCE_INLINE __attribute__((always_inline))
#endif

#define UNUSED(x) (void)x

namespace Thrive
{
constexpr float PI = 3.14159265;
constexpr double PI_DOUBLE = 3.1415926535897932;

/// Size in bytes that physics body user data is (used for collision callbacks)
constexpr size_t PHYSICS_USER_DATA_SIZE = 8;

/// Always zero bytes in pointers that stuff extra info in them thanks to alignment requirements
constexpr size_t UNUSED_POINTER_BITS = 3;

constexpr size_t STUFFED_POINTER_ALIGNMENT = 8;

constexpr uint64_t STUFFED_POINTER_DATA_MASK = 0x7;

constexpr uint64_t STUFFED_POINTER_POINTER_MASK = ~STUFFED_POINTER_DATA_MASK;

} // namespace Thrive
